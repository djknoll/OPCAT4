/*
 * Generated by XDoclet - Do not edit!
 */
package org.objectprocess.session;

/**
 * Local interface for UserAccess.
 * @lomboz generated
 */
public interface UserAccessLocal
   extends javax.ejb.EJBLocalObject
{
   /**
    * returns the user's permissions for the given workgroup.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param workgroupPermissionsPK primary key for the workgroup.
    * @return a workgroup permission value object for the requested permission.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws PermissionLookupFault if the requested permission could not be found.
    */
   public org.objectprocess.cmp.WorkgroupPermissionsValue getWorkgroupPermissionsForUser( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.WorkgroupPermissionsPK workgroupPermissionsPK ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * returns the user's permissions for the given OPM model.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param opmModelPermissionsPK primary key for the the OPM model.
    * @return a workgroup permission value object for the requested permission.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws PermissionLookupFault if the requested permission could not be found.
    */
   public org.objectprocess.cmp.OpmModelPermissionsValue getOpmModelPermissionsForUser( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.OpmModelPermissionsPK opmModelPermissionsPK ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * returns the user's permissions for the given collaborative session.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionPermissionsPK primary key for the the collaborative session.
    * @return a workgroup permission value object for the requested permission.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws PermissionLookupFault if the requested permission could not be found.
    */
   public org.objectprocess.cmp.CollaborativeSessionPermissionsValue getCollaborativeSessionPermissionsForUser( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.CollaborativeSessionPermissionsPK collaborativeSessionPermissionsPK ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * autheticates the user and logges the client into the system.
    * @param loginName login name for the user being logged in.
    * @param password password for the user being logged in.
    * @return the user's primary key guid value.
    * @throws AuthenticationFailedFault if user authentication failed.
    */
   public java.lang.String loginUser( java.lang.String loginName,java.lang.String password ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault;

   /**
    * autheticates the user for logging into the administration portal.
    * @param loginName login name for the user being logged in.
    * @param password password for the user being logged in.
    * @return the user's primary key guid value.
    * @throws AuthenticationFailedFault if user authentication failed.
    */
   public java.lang.String webLoginUser( java.lang.String loginName,java.lang.String password ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault;

   /**
    * logges the client out of the system.
    * @param loginName login name for the user being logged out.
    * @param password password for the user being logged out.
    * @throws AuthenticationFailedFault if user authentication failed.
    */
   public void logoutUser( java.lang.String userID,java.lang.String password ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault;

   /**
    * returns an enhanced user value object for the requested user.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @return the enhanced user value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    */
   public org.objectprocess.cmp.EnhancedUserValue getEnhancedUserByPK( java.lang.String sUserID,java.lang.String sPassword ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault;

   /**
    * returns a user value object for the given user id.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param userID primary key for the requested user.
    * @return the user value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws UserLookupFault if the requested user could not be found.
    */
   public org.objectprocess.cmp.UserValue getUserByPK( java.lang.String sUserID,java.lang.String sPassword,java.lang.String userID ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * returns an array list of user value objects for all users in the system.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @return the list of all users.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoUsersFoundFault if no users were found.
    */
   public java.util.ArrayList getAllUsers( java.lang.String sUserID,java.lang.String sPassword ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * returns a user value object for the requested user.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param loginName the login name for the requested user.
    * @return the user value object for the requested user.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws UserLookupFault if the requested user could not be found.
    */
   public org.objectprocess.cmp.UserValue getUserByLoginName( java.lang.String sUserID,java.lang.String sPassword,java.lang.String loginName ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * updates the user entry with the given updatable user value object.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param updatableUserValue updatable user value packing the information to be updated.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws UserLookupFault if the requested user could not be found.
    */
   public void updateUser( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.UpdatableUserValue updatableUserValue ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * marks the requested user as disabled.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param userID primary key for user to be disabled.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws UserLookupFault if the requested user could not be found.
    */
   public void disableUser( java.lang.String sUserID,java.lang.String sPassword,java.lang.String userID ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * marks the requested user as enabled.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param userID primary key for user to be enabled.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws UserLookupFault if the requested user could not be found.
    */
   public void enableUser( java.lang.String sUserID,java.lang.String sPassword,java.lang.String userID ) throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault;

   /**
    * creates a new user entry based on the information in the editable user value object. an editable user value object contains all user attributes that can be initialized during creation.
    * @param editableUserValue the editable user value object containing the editable user attributes.
    * @return GUID primary key for the new user.
    * @throws UserAlreadyExistFault if a user with the requested name already exists.
    */
   public java.lang.String createUser( org.objectprocess.cmp.EditableUserValue editableUserValue ) throws org.objectprocess.fault.create.CreationFault;

}
