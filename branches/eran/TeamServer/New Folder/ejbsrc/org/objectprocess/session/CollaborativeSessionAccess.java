/*
 * Generated by XDoclet - Do not edit!
 */
package org.objectprocess.session;

/**
 * Remote interface for CollaborativeSessionAccess.
 * @lomboz generated
 */
public interface CollaborativeSessionAccess
   extends javax.ejb.EJBObject
{
   /**
    * returns a collaborative session value object for the given collaborative session id.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for the requested collaborative session.
    * @return the collaborative session value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public org.objectprocess.cmp.CollaborativeSessionValue getCollaborativeSessionByPK( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * returns an enhanced collaborative session value object for the given collaborative session id.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for the requested collaborative session.
    * @return the enhanced collaborative session value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public org.objectprocess.cmp.EnhancedCollaborativeSessionValue getEnhancedCollaborativeSessionByPK( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * returns a collaborative session file value object for the given collaborative session id. A <code>CollaborativeSessionFileValue</code> encapsulates collaborative session attributes and the OPM model file.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for the requested collaborative session.
    * @return the collaborative session file value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public org.objectprocess.cmp.CollaborativeSessionFileValue getCollaborativeSessionFileByPK( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * returns an enhanced collaborative session permissions value object for the given collaborative session permissions primary key. An enhanced collaborative session permissions value object encapsulates a corresponding collaborative session value object.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionPermissionsPK primary key for the requested collaborative session permissions.
    * @return the enhanced collaborative session permissions value object.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws PermissionLookupFault if the requested collaborative session permissions could not be found.
    */
   public org.objectprocess.cmp.EnhancedCollaborativeSessionPermissionsValue getEnhancedCollaborativeSessionPermissionsByPK( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.CollaborativeSessionPermissionsPK collaborativeSessionPermissionsPK )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * sets the collaborative session permissions according to the editable collaborative session permissions value object. if the permissions already exist they will be updated, otherwise new permissions will be created. the method sends an UPDATE_USER_COLLABORATIVE_SESSION_PERMISSIONS message to the CollaborativeSessionTopic
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param editableCollaborativeSessionPermissionsValue an editable collaborative session permissions value object encapsulating the new permissions.
    * @throws AuthenticationFailedFault if user authentication failed.
    */
   public void setCollaborativeSessionPermissions( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.EditableCollaborativeSessionPermissionsValue editableCollaborativeSessionPermissionsValue )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, java.rmi.RemoteException;

   /**
    * Marks the user as token holder for the collaborative session. Sends a USER_IS_TOKENHOLDER message to the CollaborativeSessionTopic.
    * @param sUserID workgroup id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for the collaborative session whos token was requested.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws TokenNotAvailableFault if the token is held by a diffrent user.
    * @throws NoSuchSessionFault if the collaborative session who's token was requested could not be found.
    */
   public void requestToken( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, org.objectprocess.fault.token.TokenFault, java.rmi.RemoteException;

   /**
    * Resets the token holder attribute for the collaborative session to <code>null_user</code>, representing the fact that the token is now available. Sends a USER_RETURNED_TOKEN message to the CollaborativeSessionTopic.
    * @param sUserID workgroup id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for the collaborative session whos token was returned.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NotTheTokenHolderFault if the user was not the collaborative session's token holder.
    * @throws NoSuchSessionFault if the collaborative session who's token was returned could not be found.
    */
   public void returnToken( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, org.objectprocess.fault.token.TokenFault, java.rmi.RemoteException;

   /**
    * updates the collaborative session entry with the given updatable collaborative session value object. the method sends an UPDATE_COLLABORATIVE_SESSION_DETAILS message to the CollaborativeSessionTopic and updates the <code>lastUpdate</code> attribute for the collaborative session.
    * @param sUserID workgroup id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param updatableCollaborativeSessionValue updatable collaborative session value encapsulating the information to be updated.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public void updateCollaborativeSession( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.UpdatableCollaborativeSessionValue updatableCollaborativeSessionValue )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * Updates the collaborative session entry with the given CollaborativeSessionFileValue object. Similar to the <code>updateCollaborativeSession</code> method but allows updating the OPM model file of the seesion. the method sends a PUBLISH_UPDATED_FILE message to the CollaborativeSessionTopic and updates the <code>lastUpdate</code> attribute for the collaborative session.
    * @param sUserID workgroup id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionFileValue collaborative session file value encapsulating the information to be updated.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public void updateCollaborativeSessionFile( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.CollaborativeSessionFileValue collaborativeSessionFileValue )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * marks the requested collaborative session as disabled. If <code>recursive</code> is set to <code>true</code> all logged in session participants will be logged out of the session. If set to <code>false</code> the procedure will check that no participants are logged into the collaborative session before disabling it. if logged in participants are are found, the session will not be disabled and a <code>UsersStillLoggedInFault</code> will be raised.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for collaborative session to be disabled.
    * @param recursive a boolean denoting if simple or a recursive disable should be preformed.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    * @throws UsersStillLoggedInFault if <code>recursive</code> is set to true and the collaborative sessions has logged in participants.
    */
   public void disableCollaborativeSession( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID,boolean recursive )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, org.objectprocess.fault.recursiveDisable.RecursiveDisableFault, java.rmi.RemoteException;

   /**
    * marks the requested collaborative session as enabled.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for collaborative session to be disabled.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public void enableCollaborativeSession( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * logges the client into the session. This is a diffrent loggin then the one for system login, the flag is stored in the CollaborativeSessionPermissions entry for the user. the method sends a USER_LOGGED_INTO_SESSION message to the CollaborativeSessionTopic. note: in future tokenless session implementations the session login flag will not be presistent.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for collaborative session to be logged into.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public void sessionLoginUser( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * logges the client out of the session. the method sends a USER_LOGGED_OUT_OF_SESSION message to the CollaborativeSessionTopic.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for collaborative session to be logged into.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public void sessionLogoutUser( java.lang.String sUserID,java.lang.String sPassword,java.lang.String collaborativeSessionID )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * Commits the collaborative session. After commiting, the collaborative session is terminated and the session's <code>Terminated</code> flag is set to <code>true</code>. Commiting will seeks the latest revision , suppose it's version number is <code>[x].[y].[z]</code> (mask: [major revision].[minor revision].[build]) and generate a new revision. If <code>increaseMajor</code> is <code>true</code> then new revision number will be: <code>[x+1].0.[z+1]</code>, If <code>increaseMajor</code> is <code>false</code> then the new revision number will be: <code>[x].[y+1].[z+1]</code>. if now revisions are currently available for the OPM model the new revision's number will be: <code>1.0.1</code>. the method sends a USER_COMMITED_SESSION message to the CollaborativeSessionTopic.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param collaborativeSessionID primary key for collaborative session to be commited.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSuchSessionFault if the requested collaborative session could not be found.
    */
   public org.objectprocess.cmp.EditableRevisionValue commitCollaborativeSession( java.lang.String sUserID,java.lang.String sPassword,java.lang.String sessionID,org.objectprocess.cmp.EditableRevisionValue editableRevisionValue,java.lang.Boolean increaseMajor )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * returns an array list of CollaborativeSessionValue objects for all collaborative sessions in the system.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @return a list of all collaborative sessions.
    * @throws AuthenticationFailedFault if user authentication failed.
    * @throws NoSessionsFoundFault if no collaborative sessions were found.
    */
   public java.util.ArrayList getAllCollaborativeSessions( java.lang.String sUserID,java.lang.String sPassword )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.lookup.LookupFault, java.rmi.RemoteException;

   /**
    * Creates a new collaborative session entry based on the information in the EditableCollaborativeSessionValue object. An EditableCollaborativeSessionValue object contains all collaborative session attributes that can be initialized during creation.
    * @param sUserID user id for the user performing the action.
    * @param sPassword password for the user performing the action.
    * @param editableCollaborativeSessionValue the editable collaborative session value object containing the editable collaborative session attributes.
    * @return GUID primary key for the new OPM model.
    * @throws SessionAlreadyExistFault if a collaborative session with the requested name already exists.
    */
   public java.lang.String createCollaborativeSession( java.lang.String sUserID,java.lang.String sPassword,org.objectprocess.cmp.EditableCollaborativeSessionValue editableCollaborativeSessionValue )
      throws org.objectprocess.fault.authenticate.AuthenticationFailedFault, org.objectprocess.fault.create.CreationFault, java.rmi.RemoteException;

}
