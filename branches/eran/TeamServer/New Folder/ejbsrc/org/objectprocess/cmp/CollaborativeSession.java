/*
 * Generated by XDoclet - Do not edit!
 */
package org.objectprocess.cmp;

/**
 * Remote interface for CollaborativeSession.
 * @lomboz generated
 */
public interface CollaborativeSession
   extends javax.ejb.EJBObject
{
   /**
    * Returns the collaborative session's id.
    * @return the collaborative session's id.
    */
   public java.lang.String getCollaborativeSessionID(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the collaborative session's id
    * @param collaborativeSessionID the new collaborative session's id value
    */
   public void setCollaborativeSessionID( java.lang.String collaborativeSessionID )
      throws java.rmi.RemoteException;

   /**
    * Returns the collaborative session's name.
    * @return the collaborative session's name.
    */
   public java.lang.String getCollaborativeSessionName(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the collaborative session's name.
    * @param collaborativeSessionName the new collaborative session's name value
    */
   public void setCollaborativeSessionName( java.lang.String collaborativeSessionName )
      throws java.rmi.RemoteException;

   /**
    * Returns the collaborative session's <code>enabled</code> flag value.
    * @return the collaborative session's <code>enabled</code> flag value.
    */
   public java.lang.Boolean getEnabled(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the the collaborative session's <code>enabled</code> flag value.
    * @param enabled the new <code>enabled</code> flag value.
    */
   public void setEnabled( java.lang.Boolean enabled )
      throws java.rmi.RemoteException;

   /**
    * Returns the collaborative session's <code>dirty</code> flag value.
    * @return the collaborative session's <code>dirty</code> flag value.
    */
   public java.lang.Boolean getDirty(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the collaborative session's <code>dirty</code> flag value.
    * @param dirty the new <code>dirty</code> flag value.
    */
   public void setDirty( java.lang.Boolean dirty )
      throws java.rmi.RemoteException;

   /**
    * Returns the collaborative session's <code>terminated</code> flag value. The <code>terminated</code> flag is set to <code>true</code> once the session is commited into a new revision.
    * @return the collaborative session's <code>terminated</code> flag value.
    */
   public java.lang.Boolean getTerminated(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the collaborative session's <code>terminated</code> flag value.
    * @param terminated the new <code>terminated</code> value.
    */
   public void setTerminated( java.lang.Boolean terminated )
      throws java.rmi.RemoteException;

   /**
    * Returns the time the collaborative session was created.
    * @return the time the collaborative session was created.
    */
   public java.util.Date getCreationTime(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the time for collaborative session creation, Initialized once, on <code>ejbCreate</code>.
    * @param CreationTime the new timestamp value.
    */
   public void setCreationTime( java.util.Date creationTime )
      throws java.rmi.RemoteException;

   /**
    * Returns the collaborative session's description.
    * @return the collaborative session's description.
    */
   public java.lang.String getDescription(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the collaborative session's description.
    * @param description the new description value.
    */
   public void setDescription( java.lang.String description )
      throws java.rmi.RemoteException;

   /**
    * Returns the last time the OPM model has been saved into the session.
    * @return the last time the OPM model has been saved into the session.
    */
   public java.util.Date getLastUpdate(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the last time the OPM model has been saved into the session.
    * @param lastUpdate the new lastUpdate value.
    */
   public void setLastUpdate( java.util.Date lastUpdate )
      throws java.rmi.RemoteException;

   /**
    * Returns the id for the OPM model the session is based on.
    * @return the id for the OPM model the session is based on.
    */
   public java.lang.String getOpmModelID(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the id for the OPM model the session is based on.
    * @param opmModelID the new opmModelID value.
    */
   public void setOpmModelID( java.lang.String opmModelID )
      throws java.rmi.RemoteException;

   /**
    * Returns the id for the OPM model revision the session is based on.
    * @return the revision id.
    */
   public java.lang.String getRevisionID(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the id for the OPM model revision the session is based on.
    * @param revision the new revision id value.
    */
   public void setRevisionID( java.lang.String revisionID )
      throws java.rmi.RemoteException;

   /**
    * Returns the token timeout defined for the session. a client holding the session's token has to report to the server every <code>tokenTimeout</code> milliseconds. Failing to report within this time frame will transfer the token to the server.
    * @return the token timeout value.
    */
   public java.lang.Integer getTokenTimeout(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the token timeout defined for the session.
    * @param tokenTimeout the new tokenTimeout value.
    */
   public void setTokenTimeout( java.lang.Integer tokenTimeout )
      throws java.rmi.RemoteException;

   /**
    * Returns the user timeout defined for the session.
    * @return the user timeout value.
    */
   public java.lang.Integer getUserTimeout(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the user timeout defined for the session.
    * @param userTimeout the new user timeout value.
    */
   public void setUserTimeout( java.lang.Integer userTimeout )
      throws java.rmi.RemoteException;

   /**
    * Returns the id for the user currently holding the session token.
    * @return the token holder id.
    */
   public java.lang.String getTokenHolderID(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the id for the user currently holding the session token.
    * @param tokenHolderID the new token holder id value.
    */
   public void setTokenHolderID( java.lang.String tokenHolderID )
      throws java.rmi.RemoteException;

   /**
    * Returns the OPX file currently stored in the session.
    * @return the opmModelFile
    */
   public java.lang.String getOpmModelFile(  )
      throws java.rmi.RemoteException;

   /**
    * Sets the file currently stored in the session.
    * @param opmModelFile the new OPX file.
    */
   public void setOpmModelFile( java.lang.String opmModelFile )
      throws java.rmi.RemoteException;

   public org.objectprocess.cmp.CollaborativeSessionValue getCollaborativeSessionValue(  )
      throws java.rmi.RemoteException;

   public org.objectprocess.cmp.EnhancedCollaborativeSessionValue getEnhancedCollaborativeSessionValue(  )
      throws java.rmi.RemoteException;

   public org.objectprocess.cmp.EditableCollaborativeSessionValue getEditableCollaborativeSessionValue(  )
      throws java.rmi.RemoteException;

   public org.objectprocess.cmp.UpdatableCollaborativeSessionValue getUpdatableCollaborativeSessionValue(  )
      throws java.rmi.RemoteException;

   public org.objectprocess.cmp.CollaborativeSessionFileValue getCollaborativeSessionFileValue(  )
      throws java.rmi.RemoteException;

   public void setCollaborativeSessionFileValue( org.objectprocess.cmp.CollaborativeSessionFileValue collaborativeSessionFileValue )
      throws java.rmi.RemoteException;

}
